{"version":3,"sources":["components/dashboard.js","utils.js","App.js","index.js"],"names":["Dashboard","price","data","className","options","tooltips","intersect","mode","responsive","maintainAspectRatio","formatData","finalData","labels","datasets","label","backgroundColor","borderColor","fill","dates","map","val","ts","date","Date","day","getDate","month","getMonth","year","getFullYear","priceArr","reverse","App","useState","currencies","setcurrencies","pair","setpair","setprice","pastData","setpastData","ws","useRef","first","url","useEffect","current","WebSocket","pairs","a","fetch","then","res","json","filtered","filter","quote_currency","sort","b","base_currency","apiCall","msg","type","product_ids","channels","jsonMsg","JSON","stringify","send","historicalDataURL","dataArr","formattedData","fetchHistoricalData","onmessage","e","parse","product_id","name","value","onChange","unsubMsg","unsub","target","cur","idx","id","display_name","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79e60bab.chunk.js","sourcesContent":["import { Line } from \"react-chartjs-2\";\n\nfunction Dashboard({ price, data }) {\n  const opts = {\n    tooltips: {\n      intersect: false,\n      mode: \"index\",\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n  };\n  if (price === \"0.00\") {\n    return <h2>please select a currency pair</h2>;\n  }\n  return (\n    <div className=\"dashboard\">\n      <h2>{`$${price}`}</h2>\n\n      <div className=\"chart-container\">\n        <Line data={data} options={opts} />\n      </div>\n    </div>\n  );\n}\n\nexport default Dashboard;\n","export const formatData = (data) => {\n  let finalData = {\n    labels: [],\n    datasets: [\n      {\n        label: \"Price\",\n        data: [],\n        backgroundColor: \"#00000\",\n        borderColor: \"#BDBDBD\",\n        fill: false,\n      },\n    ],\n  };\n\n  //convert dates from timestamp to mm/dd/yy format\n  let dates = data.map((val) => {\n    const ts = val[0];\n    let date = new Date(ts * 1000);\n    let day = date.getDate();\n    let month = date.getMonth() + 1;\n    let year = date.getFullYear();\n\n    let final = `${month}-${day}-${year}`;\n    return final;\n  });\n\n  //coinbase API returns multiple price values, we want the ending price for that day\n  let priceArr = data.map((val) => {\n    return val[4];\n  });\n\n  //reverse price array so it is in chronological order\n  priceArr.reverse();\n\n  //do same for dates\n  dates.reverse();\n\n  //set data labels as the date array for ChartJS\n  finalData.labels = dates;\n\n  //price array will be used as dataset for ChartJS\n  finalData.datasets[0].data = priceArr;\n\n  return finalData;\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Dashboard from \"./components/dashboard\";\nimport { formatData } from \"./utils\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [currencies, setcurrencies] = useState([]);\n  const [pair, setpair] = useState(\"\");\n  const [price, setprice] = useState(\"0.00\");\n  const [pastData, setpastData] = useState({});\n  const ws = useRef(null);\n\n  let first = useRef(false);\n  const url = \"https://api.pro.coinbase.com\";\n\n  useEffect(() => {\n    ws.current = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\n\n    let pairs = [];\n\n    const apiCall = async () => {\n      await fetch(url + \"/products\")\n        .then((res) => res.json())\n        .then((data) => (pairs = data));\n\n      let filtered = pairs.filter((pair) => {\n        if (pair.quote_currency === \"USD\") {\n          return pair;\n        }\n        return pair;\n      });\n\n      filtered = filtered.sort((a, b) => {\n        if (a.base_currency < b.base_currency) {\n          return -1;\n        }\n        if (a.base_currency > b.base_currency) {\n          return 1;\n        }\n        return 0;\n      });\n\n      setcurrencies(filtered);\n\n      first.current = true;\n    };\n\n    apiCall();\n  }, []);\n\n  useEffect(() => {\n    if (!first.current) {\n      return;\n    }\n\n    let msg = {\n      type: \"subscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\"],\n    };\n    let jsonMsg = JSON.stringify(msg);\n    ws.current.send(jsonMsg);\n\n    let historicalDataURL = `${url}/products/${pair}/candles?granularity=21600`; // https://docs.pro.coinbase.com/#get-historic-rates\n    const fetchHistoricalData = async () => {\n      let dataArr = [];\n      await fetch(historicalDataURL)\n        .then((res) => res.json())\n        .then((data) => (dataArr = data));\n\n      let formattedData = formatData(dataArr);\n      setpastData(formattedData);\n    };\n\n    fetchHistoricalData();\n\n    ws.current.onmessage = (e) => {\n      let data = JSON.parse(e.data);\n      if (data.type !== \"ticker\") {\n        return;\n      }\n\n      if (data.product_id === pair) {\n        setprice(data.price);\n      }\n    };\n  }, [pair]);\n\n  const handleSelect = (e) => {\n    let unsubMsg = {\n      type: \"unsubscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\"],\n    };\n    let unsub = JSON.stringify(unsubMsg);\n\n    ws.current.send(unsub);\n\n    setpair(e.target.value);\n  };\n\n  return (\n    <div>\n      <nav>\n        <h1>CoinmoonðŸš€</h1>\n      </nav>\n      <div className=\"container\">\n        {\n          <select name=\"currency\" value={pair} onChange={handleSelect}>\n            {currencies.map((cur, idx) => {\n              return (\n                <option key={idx} value={cur.id}>\n                  {cur.display_name}\n                </option>\n              );\n            })}\n          </select>\n        }\n        <Dashboard price={price} data={pastData} />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}